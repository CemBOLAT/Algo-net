const translations = {
  tr: {
    // Common UI for algorithms pages
    add_number_label: 'Sayı ekle (Enter ile)',
    add: 'Ekle',
    clear: 'Temizle',
    operation: 'İşlem',
    insert_delete: 'Ekleme/Silme',
    traversal_mode: 'Dolaşma',
    insertion_algorithm: 'Ekleme Algoritması',
    avl_tree: 'AVL Tree',
    traversal_label: 'Traversal',
    run: 'Çalıştır',
    input_order: 'Giriş sırası:',
    delete: 'Sil',
    traversal_order: 'Traversal Sırası (Order):',
    no_visit_yet: 'Henüz ziyaret yok',
    queue: 'Kuyruk (Queue):',
    queue_empty: 'Kuyruk boş',
    step_label: 'Adım',
    back: 'Geri',
    fast_finish: 'Hızlı Bitir',
    play: 'Oynat',
    pause: 'Duraklat',
    reset: 'Sıfırla',
    next: 'İleri',
    // Traversal messages
    empty_node: 'Boş düğüm',
    inorder_enter: 'Düğüm {v} içine gir (inorder: L, N, R)',
    inorder_go_left: 'Sol alt ağaç: {v} → sol',
    inorder_null_left: 'Sol boş: {v} için sol çocuk yok, düğümü ziyaret et ve üst düğüme dön',
    inorder_visit: 'Ziyaret: {v}',
    inorder_go_right: 'Sağ alt ağaç: {v} → sağ',
    inorder_null_right: 'Sağ boş: {v} için sağ çocuk yok, üst düğüme geç',
    inorder_done: 'Inorder traversal tamamlandı',
    preorder_enter: 'Düğüm {v} içine gir (preorder: N, L, R)',
    preorder_visit: 'Ziyaret: {v}',
    preorder_go_left: 'Sol alt ağaç: {v} → sol',
    preorder_go_right: 'Sağ alt ağaç: {v} → sağ',
    preorder_done: 'Preorder traversal tamamlandı',
    postorder_enter: 'Düğüm {v} içine gir (postorder: L, R, N)',
    postorder_go_left: 'Sol alt ağaç: {v} → sol',
    postorder_null_left: 'Sol boş: {v} için sol çocuk yok, sağ tarafa bak',
    postorder_go_right: 'Sağ alt ağaç: {v} → sağ',
    postorder_null_right: 'Sağ boş: {v} için sağ çocuk yok, düğümü ziyaret et',
    postorder_visit: 'Ziyaret: {v}, üst düğüme geç',
    postorder_done: 'Postorder traversal tamamlandı',
    bfs_start: 'Level Order (BFS) başlat: kökü (seviye 0) kuyruğa al',
    bfs_dequeue: 'Kuyruktan çıkar: {v} (seviye {level})',
    bfs_visit: 'Ziyaret: {v} (seviye {level})',
    bfs_enqueue: 'Kuyruğa ekle: {child} (seviye {level})',
    bfs_done: 'Level Order traversal tamamlandı',
    // Array algorithms UI
    value_input_label: 'Değer (Enter ile ekle)',
    mode_label: 'İşlem',
    search: 'Arama',
    sort: 'Sıralama',
    search_algorithm: 'Arama Algoritması',
    target_label: 'Hedef',
    sort_algorithm: 'Sıralama Algoritması',
    order_label: 'Sıra',
    asc: 'Artan',
    desc: 'Azalan',
    array_label: 'Dizi',
    result_label: 'Sonuç',
    array_empty_error: 'Dizi Boş Olamaz.',
    target_empty_error: 'Hedef Boş Olamaz.',
    found_index: 'Bulundu (index: {index})',
    found_index_sorted_copy: 'Bulundu (sıralı kopyada index: {index})',
    not_found: 'Bulunamadı',
    bucket_label: 'kova {d}',
    // Search messages
    arr_initial: 'Başlangıç dizisi: [{arr}]',
    sorted_copy: 'Sıralı kopya: [{arr}]',
    ls_compare_equal: 'arr[{i}] == {target}. bulundu.',
    ls_compare_not_equal: 'arr[{i}] != {target}. sonraki indexe bakıyoruz.',
    ls_found: 'arr[{i}] == {target}. bulundu.',
    ls_not_found: 'Hedef {target} bulunamadı.',
    bs_compare_equal: 'L={l}, R={r}, M={m} -> arr[M]={val} == {target}. bulundu.',
    bs_found: 'Bulundu: index {m}',
    bs_compare_less: 'L={l}, R={r}, M={m} -> arr[M]={val} < {target}. sol kısmı at, L=M+1',
    bs_compare_greater: 'L={l}, R={r}, M={m} -> arr[M]={val} > {target}. sağ kısmı at, R=M-1',
    bs_not_found: 'Hedef {target} bulunamadı.',
  },
  en: {
    // Common UI
    add_number_label: 'Add number (press Enter)',
    add: 'Add',
    clear: 'Clear',
    operation: 'Operation',
    insert_delete: 'Insert/Delete',
    traversal_mode: 'Traversal',
    insertion_algorithm: 'Insertion Algorithm',
    avl_tree: 'AVL Tree',
    traversal_label: 'Traversal',
    run: 'Run',
    input_order: 'Input order:',
    delete: 'Delete',
    traversal_order: 'Traversal Order:',
    no_visit_yet: 'No visits yet',
    queue: 'Queue:',
    queue_empty: 'Queue is empty',
    step_label: 'Step',
    back: 'Back',
    fast_finish: 'Fast Finish',
    play: 'Play',
    pause: 'Pause',
    reset: 'Reset',
    next: 'Next',
    // Traversal messages
    empty_node: 'Empty node',
    inorder_enter: 'Enter node {v} (inorder: L, N, R)',
    inorder_go_left: 'Left subtree: {v} → left',
    inorder_null_left: 'Left null: no left child for {v}, visit node and return up',
    inorder_visit: 'Visit: {v}',
    inorder_go_right: 'Right subtree: {v} → right',
    inorder_null_right: 'Right null: no right child for {v}, move up',
    inorder_done: 'Inorder traversal completed',
    preorder_enter: 'Enter node {v} (preorder: N, L, R)',
    preorder_visit: 'Visit: {v}',
    preorder_go_left: 'Left subtree: {v} → left',
    preorder_go_right: 'Right subtree: {v} → right',
    preorder_done: 'Preorder traversal completed',
    postorder_enter: 'Enter node {v} (postorder: L, R, N)',
    postorder_go_left: 'Left subtree: {v} → left',
    postorder_null_left: 'Left null: no left child for {v}, check right',
    postorder_go_right: 'Right subtree: {v} → right',
    postorder_null_right: 'Right null: no right child for {v}, visit node',
    postorder_visit: 'Visit: {v}, go up',
    postorder_done: 'Postorder traversal completed',
    bfs_start: 'Start Level Order (BFS): enqueue root (level 0)',
    bfs_dequeue: 'Dequeue: {v} (level {level})',
    bfs_visit: 'Visit: {v} (level {level})',
    bfs_enqueue: 'Enqueue: {child} (level {level})',
    bfs_done: 'Level Order traversal completed',
    // Array algorithms UI
    value_input_label: 'Value (press Enter to add)',
    mode_label: 'Mode',
    search: 'Search',
    sort: 'Sort',
    search_algorithm: 'Search Algorithm',
    target_label: 'Target',
    sort_algorithm: 'Sort Algorithm',
    order_label: 'Order',
    asc: 'Ascending',
    desc: 'Descending',
    array_label: 'Array',
    result_label: 'Result',
    array_empty_error: 'Array cannot be empty.',
    target_empty_error: 'Target cannot be empty.',
    found_index: 'Found (index: {index})',
    found_index_sorted_copy: 'Found (in sorted copy at index: {index})',
    not_found: 'Not Found',
    bucket_label: 'bucket {d}',
    // Search messages
    arr_initial: 'Initial array: [{arr}]',
    sorted_copy: 'Sorted copy: [{arr}]',
    ls_compare_equal: 'arr[{i}] == {target}. found.',
    ls_compare_not_equal: 'arr[{i}] != {target}. moving to next index.',
    ls_found: 'arr[{i}] == {target}. found.',
    ls_not_found: 'Target {target} not found.',
    bs_compare_equal: 'L={l}, R={r}, M={m} -> arr[M]={val} == {target}. found.',
    bs_found: 'Found: index {m}',
    bs_compare_less: 'L={l}, R={r}, M={m} -> arr[M]={val} < {target}. discard left side, L=M+1',
    bs_compare_greater: 'L={l}, R={r}, M={m} -> arr[M]={val} > {target}. discard right side, R=M-1',
    bs_not_found: 'Target {target} not found.',
  }
};

const fmt = (s, vars) => Object.entries(vars || {}).reduce((acc, [k, v]) => acc.replace(new RegExp(`\\{${k}\\}`, 'g'), String(v)), s);

export const getAlgoTranslator = (language = 'tr') => {
  const table = translations[language] || translations.tr;
  return (key, vars) => fmt(table[key] ?? key, vars);
};
